{{- range .Values.instances }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name }}
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        teknoir.org/app: {{ .name }}
        app: {{ .name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8000"
    spec:
      runtimeClassName: nvidia
      containers:
        - name: {{ $.Chart.Name }}
          image: "{{ default $.Values.defaults.image.repository (default (dict "repository" $.Values.defaults.image.repository) .image).repository }}:{{ default $.Values.defaults.image.tag (default (dict "tag" $.Values.defaults.image.tag) .image).tag }}"
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 60
            periodSeconds: 6
            failureThreshold: 10
          envFrom:
            - configMapRef:
                name: {{ .name }}-env-config
          resources:
            {{- toYaml (default $.Values.defaults.resources .resources) | nindent 12 }}
          volumeMounts:
            - name: model-volume
              mountPath: /models
            - name: video-storage
              mountPath: /app/videos
            {{- if (default $.Values.defaults.nvdsanalytics.enabled (default (dict "enabled" $.Values.defaults.nvdsanalytics.enabled) .nvdsanalytics).enabled) }}
            - name: nvdsanalytics-config
              mountPath: {{ default $.Values.defaults.nvdsanalytics.mountPath (default (dict "mountPath" $.Values.defaults.nvdsanalytics.mountPath) .nvdsanalytics).mountPath }}
            {{- end }}
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: model-volume
          hostPath:
            path: {{ default $.Values.defaults.modelRepositoryPath .modelRepositoryPath }}
            type: DirectoryOrCreate
        - name: video-storage
          hostPath:
            path: {{ default $.Values.defaults.videoStoragePath .videoStoragePath }}
            type: DirectoryOrCreate
        {{- if (default $.Values.defaults.nvdsanalytics.enabled (default (dict "enabled" $.Values.defaults.nvdsanalytics.enabled) .nvdsanalytics).enabled) }}
        - name: nvdsanalytics-config
          configMap:
            name: {{ .name }}-analytics-config
        {{- end }}
        # Nvidia has the argus socket mounted under /tmp/argus_socket
        - name: tmp
          hostPath:
            path: /tmp
            type: DirectoryOrCreate
  {{- end }}